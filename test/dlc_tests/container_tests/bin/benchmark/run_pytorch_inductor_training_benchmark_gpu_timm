#!/bin/bash

echo "EC2_INSTANCE_TYPE: $1"

PYTHON_VERSION=$(python -c 'import sys; print(sys.version_info[0])' | tr -d "'")
if [ "$PYTHON_VERSION" -eq 2 ]
then
  exit 0
fi
HOME_DIR=/test/benchmark
BIN_DIR=${HOME_DIR}/bin
LOG_DIR=${HOME_DIR}/logs

mkdir -p ${HOME_DIR}
mkdir -p ${BIN_DIR}
mkdir -p ${LOG_DIR}

python -c "import sys;
assert sys.version_info < (3, 7);"
PYTHON_VERSION_CHECK=`echo $?`

set -e
rm -rf $BIN_DIR/pytorch
git clone https://github.com/pytorch/pytorch.git --branch master --single-branch --depth 1 $BIN_DIR/pytorch


pip install -U numpy
pip install gitpython
pip install tabulate==0.9.0

TRAINING_LOG=${LOG_DIR}/pytorch_inductor_timm_benchmark.log

rm -rf $BIN_DIR/pytorch/timm_logs
mkdir -p $BIN_DIR/pytorch/timm_logs
python $BIN_DIR/pytorch/benchmarks/dynamo/timm_models.py --performance --amp -dcuda --output=timm_logs/inductor_timm_amp_training_cuda_performance.csv --training --inductor --output-directory=$BIN_DIR/pytorch/ --no-skip --dashboard -x GPTJForCausalLM -x Reformer -x GPTJForQuestionAnswering -x GPTNeoForSequenceClassification -x BlenderbotForConditionalGeneration -x GPTNeoForCausalLM --cold-start-latency > $TRAINING_LOG 2>&1
python $BIN_DIR/pytorch/benchmarks/dynamo/timm_models.py --accuracy --amp -dcuda --output=timm_logs/inductor_timm_amp_training_cuda_accuracy.csv --training --inductor --output-directory=$BIN_DIR/pytorch/ --no-skip --dashboard -x GPTJForCausalLM -x Reformer -x GPTJForQuestionAnswering -x GPTNeoForSequenceClassification -x BlenderbotForConditionalGeneration -x GPTNeoForCausalLM --cold-start-latency > $TRAINING_LOG 2>&1

RETURN_VAL=`echo $?`
set -e

if [ ${RETURN_VAL} -eq 0 ]; then
    echo "Training Timm Complete using PyTorch Inductor."
else
    echo "Training Timm Failed using PyTorch Inductor."
    cat $TRAINING_LOG
    exit 1
fi

python read_upload_benchmarking_results.py -dir $BIN_DIR/pytorch/timm_logs \
       -model_suite timm -precision amp -instance_type $EC2_INSTANCE_TYPE


exit 0